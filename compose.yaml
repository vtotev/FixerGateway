services:

  postgres:
    container_name: "postgres"
    image: 'postgres:latest'
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - ${DB_PORT}:${DB_PORT}
    networks:
      - gateway_api_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  db-migrations:
    image: "flyway/flyway:latest"
    container_name: 'db-migrations'
    command: ["-url=${DB_DRIVER}://${DB_HOST}:${DB_PORT}/${DB_NAME}", "-user=${DB_USER}", "-password=${DB_PASSWORD}",
              "-schemas=${DB_SCHEMA}", "-baselineOnMigrate=${FLYWAY_BASELINE_ON_MIGRATE}", "migrate"]
    volumes:
      - ./migrations:/flyway/sql
    networks:
      - gateway_api_network
    depends_on:
      - "postgres"

  rabbitmq:
    container_name: "rabbitmq"
    image: 'rabbitmq:latest'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    ports:
      - ${RABBITMQ_PORT}:${RABBITMQ_PORT}
    networks:
      - gateway_api_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      start_period: 10s
      interval: 15s
      timeout: 10s
      retries: 10

  redis:
    container_name: "redis"
    image: redis
    environment:
      password: ${REDIS_PASS}
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - gateway_api_network

  fixer-gateway-app:
    container_name: "fixer-gateway-app"
    env_file:
      - app.env
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${API_PORT}:${API_PORT}"
    networks:
      - gateway_api_network
    restart: on-failure
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      db-migrations:
        condition: service_started

networks:
  gateway_api_network:

volumes:
  postgres_data:
